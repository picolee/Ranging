/*
 * ranging_mmwave_structures.h
 * versions of the mmwave structures instantiated here to
 * modify/make available for our use case
 *
 *  Created on: Jun 7, 2024
 *      Author: LeeLemay
 */

#ifndef SHARED_RANGING_MMWAVE_STRUCTURES_H_
#define SHARED_RANGING_MMWAVE_STRUCTURES_H_

#include <stdint.h>
#include <xdc/runtime/System.h>
#include <ti/common/sys_common.h>
#include <ti/control/mmwave/mmwave.h>
#include <ti/control/mmwave/include/mmwave_internal.h>
#include <ti/drivers/mailbox/mailbox.h>
#include <ti/drivers/mailbox/include/mailbox_internal.h>

#ifdef SUBSYS_DSS
#include <inc/ranging_dss.h>
#else
#include <inc/ranging_mss.h>
#endif

/**
 * @brief
 *  mmWave Payload identifier
 *
 * @details
 *  Messages exchanged between the mmWave execution domains have a payload
 *  identifier which is used to describe the contents of the actual message
 */
typedef enum MMWave_PayloadId_e
{
    /**
     * @brief   Identifier which indicates that an mmWave link configuration
     * is being exchanged between the mmWave domains
     */
    MMWave_PayloadId_CONFIG = 0xABCD1234U,

    /**
     * @brief   Identifier which indicates that the mmWave module has been
     * opened.
     */
    MMWave_PayloadId_OPEN,

    /**
     * @brief   Identifier which indicates that the mmWave module has been
     * closed.
     */
    MMWave_PayloadId_CLOSE,

    /**
     * @brief   Identifier which indicates that the mmWave link has been started
     * and is operational
     */
    MMWave_PayloadId_START,

    /**
     * @brief   Identifier which indicates that the mmWave link has been stopped
     * and is no longer operational
     */
    MMWave_PayloadId_STOP,

    /**
     * @brief   Identifier which indicates that the mmWave link has reported an
     * asynchronous event
     */
    MMWave_PayloadId_EVENT
}MMWave_PayloadId;

/**
 * @brief
 *  mmWave Message for event
 *
 * @details
 *  The structure defines the message which is used to exchange asynchronus events
 *  generated by the BSS between the mmWave execution domains.
 */
typedef struct MMWave_MsgEvent_t
{
    /**
     * @brief   mmWave link message identifier
     */
    uint16_t        msgId;

    /**
     * @brief   mmWave link sub block identifier
     */
    uint16_t        sbId;

    /**
     * @brief   mmWave link sub block length
     */
    uint16_t        sbLen;
}MMWave_MsgEvent;

/**
 * @brief
 *  mmWave Message Header
 *
 * @details
 *  Messages exchanged between the mmWave execution domains have a fixed
 *  size header added to all the messages which are exchanged.
 */
typedef struct MMWave_MsgHeader_t
{
    /**
     * @brief   Identifier which describes the payload being carried in
     * the message
     */
    MMWave_PayloadId        id;

    /**
     * @brief   Length of the payload message which is being sent across
     */
    uint32_t                length;
}MMWave_MsgHeader;

/**
 * @brief
 *  mmWave Message
 *
 * @details
 *  Messages exchanged between the mmWave execution domains have a payload
 *  identifier which is used to describe the contents of the actual message
 */
typedef struct MMWave_Msg_t
{
    /**
     * @brief   Message header which is added to each message
     */
    MMWave_MsgHeader    header;

    /**
     * @brief   Union which describes the actual message which is being
     * exchanged
     */
    union
    {
        /**
         * @brief   This is the message which serializes the profile & chirp
         * configuration into a flat data buffer. This is *valid* only if the
         * message id is MMWave_PayloadId_CONFIG
         */
        uint8_t                 cfgMessage[MAILBOX_DATA_BUFFER_SIZE - sizeof(MMWave_MsgHeader)];

        /**
         * @brief   This is the mmWave open message which is passed to the remote
         * peer once the mmWave module has been opened successfully. This is *valid* only
         * if the message id is MMWave_PayloadId_OPEN
         */
        MMWave_OpenCfg          openCfg;

        /**
         * @brief   This is the mmWave START message which is passed to the remote
         * peer once the mmWave module has been started. This is *valid* only
         * if the message id is MMWave_PayloadId_START
         */
        MMWave_CalibrationCfg   calibrationCfg;

        /**
         * @brief   This is the mmWave event message which is exchanged between
         * the mmWave execution domains. This is *valid* only if the message id
         * is MMWave_PayloadId_EVENT
         */
        MMWave_MsgEvent         event;
    }u;
}MMWave_Msg;



/**
 * @brief
 *  mmWave Dual Core
 *
 * @details
 *  The structure is used to keep track of information required for the
 *  mmWave Dual Core SOC.
 */
typedef struct MMWave_Dualcore_t
{
    /**
     * @brief   Mailbox handle to the peer which is used to exchange
     * mmWave specific messages
     */
    Mbox_Handle          peerMailbox;

    /**
     * @brief   The peer mailbox can be used across multiple threads
     * and the semaphore is used to protect against concurrent access
     */
    SemaphoreP_Handle       mailboxSemHandle;
}MMWave_Dualcore;



#endif /* SHARED_RANGING_MMWAVE_STRUCTURES_H_ */
